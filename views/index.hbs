<div class="container-fluid">
    <div class="container p-4">
        <p class="display-4">Preguntas</p>
        <hr />
        <div class="p-3">
            <h3 class="text-primary mb-3">¿Cuáles serían las cualidades para un código limpio?</h3>
            <p>
                En mi trabajo suelo tener en cuenta unas pautas generales para garantizar un código de calidad. Estas pautas serian mi respuesta.
                <ul>
                    <li>Simplicidad: cada unidad de código (ya sea clase, método o entidad), debe tener una única función o utilidad definida. Si no es así, entonces se puede dividir en 2 o más componentes.</li>
                    <li>Extensibilidad: Los componentes de código deben ser diseñados teniendo en cuenta las variables sobre las cuales se puede acrecentar el proyecto más adelante. De esta forma se logra un código abierto a la modificación y cerrado a la modificación estructural.</li>
                    <li>Unicidad: Idealmente, cada unidad de código usable debe estar encapsulada para que pueda sr empleada desde cualquier lugar, y de esta forma evitar el código duplicado.</li>
                </ul>
            </p>
        </div>
        <div class="p-3">
            <h3 class="text-primary mb-3">¿Cuáles serían los estándares según tú para un buen proyecto?</h3>
            <p>
                En mi opinión:
                <ul>
                    <li>Que sea un proyecto en dónde se pueda definir un alcance claro.</li>
                    <li>Que desde el inicio se tengan identificadas las necesidades a solventar.</li>
                    <li>Que desde una fase temprana se conozcan los riegos y que se tomen acciones para mitigarlos o afrontarlos.</li>
                    <li>Que existan mecanismos efectivos de retroalimentación sobre los entregables realizados.</li>
                </ul>
            </p>
        </div>
        <div class="p-3">
            <h3 class="text-primary mb-3">¿Qué patrones conoce y utiliza? </h3>
            <p>
                Enfocando la pregunta hacia patrones de diseño:
                <ul>
                    <li>Singleton: Muy útil para gestionar recursos críticos en las aplicaciones.</li>
                    <li>Adaptador: Algunos conocedores del tema no lo consideran un patrón e incluso hay quienes lo llaman un antipatrón, pero en la práctica permite controlar las dependencias de nuestro código con librerías y herramientas externas.</li>
                    <li>Strategy: Excelente para parametrizar el comportamiento en objectos con lógica de negocio, en tiempo de ejecución. </li>
                </ul>
            </p>
        </div>
    </div>
</div>